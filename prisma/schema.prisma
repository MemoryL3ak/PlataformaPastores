generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider             = "postgresql"
  url                  = env("DATABASE_URL")
  directUrl            = env("DIRECT_URL")
  relationMode = "foreignKeys" 
}

model User {
  id             String    @id @default(uuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?  
  image          String?
  accounts       Account[]
  sessions       Session[]
}


model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Rol {
  id       String       @id @default(cuid())
  nombre   String       @unique
  usuarios UsuarioRol[]
}

model Usuario {
  id     String       @id @default(cuid())
  nombre String?
  email  String?      @unique
  roles  UsuarioRol[]
  activo  Boolean  @default(false)

}

model UsuarioRol {
  usuarioId String
  rolId     String

  usuario Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  rol     Rol     @relation(fields: [rolId], references: [id], onDelete: Cascade)

  @@id([usuarioId, rolId])
}


enum PastorStatus {
  ACTIVO
  INACTIVO
  PENDIENTE
}

enum CredentialType {
  ACREDITACION_2025
  INVITADO
}

enum CredentialStatus {
  EMITIDA
  IMPRESA
  ENTREGADA
  REVOCADA
  VENCIDA
}

model Iglesia {
  id      Int    @id @default(autoincrement())
  nombre    String
  slug    String @unique
  direccion String?
  ciudad    String?
  region    String?
  telefono  String?
  email     String?

  pastores  Pastor[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([nombre])
  @@index([ciudad, region])
}

model Pastor {
  id         String        @id @default(uuid())
  nombres    String
  apellidos  String
  rut        String?       @unique
  telefono   String?
  email      String?

  iglesia    Iglesia?      @relation(fields: [iglesiaId], references: [id])
  iglesiaId  String?

  estado     PastorStatus  @default(PENDIENTE)
  notas      String?

  credencial Credencial?

  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@index([apellidos, nombres])
  @@index([iglesiaId])
}

model Credencial {
  id               String           @id @default(uuid())
  pastor           Pastor           @relation(fields: [pastorId], references: [id], onDelete: Cascade)
  pastorId         String           @unique

  numero           String           @unique
  tipo             CredentialType
  estado           CredentialStatus @default(EMITIDA)

  emitidaEn        DateTime         @default(now())
  venceEn          DateTime?
  impresaEn        DateTime?
  entregadaEn      DateTime?
  revocadaEn       DateTime?
  motivoRevocacion String?

  qrUrl            String?

  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@index([estado, tipo])
  @@index([emitidaEn])
}
